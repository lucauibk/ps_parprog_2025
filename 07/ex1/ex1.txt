for (int i=0; i < n-1; i++) {
    x[i] = (y[i] + x[i+1]) / 7;
}
Anti-dependency (WaR): jedes x[i] ist von x[i+1] abhängig loop-carried -> nicht parallelisierbar
x[i+1] wird verwendet bevor es geschrieben wird

Optimization: reverse loop
#pragma omp parallel for
for(int i = n - 2; i >= 0; i--){
    x[i] = (y[i] +  x[i+1]) / 7;
}

outbase:
#pragma omp parallel
{
    #pragma omp for
    for(int i = 0; i < n-1; i++){
        x2[i] = x[i+1]
    }
    #pragma omp for
    for(int i = 0; i < n-1; i++){
        x[i] = (y[i] + x2[i+1] / 7)
    }
}
-----------------------

for (int i=0; i < n; i++) {
    a = (x[i] + y[i]) / (i+1);
    z[i] = a;
}
f = sqrt(a + k);

True dependeny (loop independent): read after write, a wird als erstes geschrieben und danach gelesen
schleife parallelisierbar f nicht muss danach berechnet werden

Optimization: in f wird immer das letzte a verwendet also(f = sqrt((x[n-1] + y[n-1] / n) + k))
#pragma omp parallel for private(temp)
for(int i = 0; i < n; i++){
    temp = (x[i] + y[i]) / (i+1);
    z[i] = temp;
}
f = sqrt((x[n-1] + y[n-1] / n) + k)

------------------------

#pragma omp parallel for
for (int i=0; i < n; i++) {
   x[i] = y[i] * 2 + b * i;
}
no dependency weil ursprünlgiche version von y[i] gelesen wird

#pragma omp parallel for
for (int i=0; i < n; i++) {
   y[i] = x[i]  + a / (i+1);
}
true dependency parallelisierbar aber reihenfolge der schleifen wichtig schleife 1 muss vor schleife 2 fertiggestellt werden sonst kann x nicht richtig gelesnen werden
cross dependency

andere möglichkeit:
#pragma omp parallel sections
#pragma omp section: 1. schleife
#pragma omp section: #pragma omp barrier: 2. schleife

